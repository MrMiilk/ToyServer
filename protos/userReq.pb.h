// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userReq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userReq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userReq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userReq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userReq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userReq_2eproto;
namespace protos {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserReq;
class UserReqDefaultTypeInternal;
extern UserReqDefaultTypeInternal _UserReq_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::FileInfo* Arena::CreateMaybeMessage<::protos::FileInfo>(Arena*);
template<> ::protos::UserInfo* Arena::CreateMaybeMessage<::protos::UserInfo>(Arena*);
template<> ::protos::UserReq* Arena::CreateMaybeMessage<::protos::UserReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

enum UserReq_reqTp : int {
  UserReq_reqTp_regist = 0,
  UserReq_reqTp_login = 1,
  UserReq_reqTp_getFile = 2,
  UserReq_reqTp_uploadFile = 3,
  UserReq_reqTp_mkDir = 4,
  UserReq_reqTp_UserReq_reqTp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserReq_reqTp_UserReq_reqTp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserReq_reqTp_IsValid(int value);
constexpr UserReq_reqTp UserReq_reqTp_reqTp_MIN = UserReq_reqTp_regist;
constexpr UserReq_reqTp UserReq_reqTp_reqTp_MAX = UserReq_reqTp_mkDir;
constexpr int UserReq_reqTp_reqTp_ARRAYSIZE = UserReq_reqTp_reqTp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserReq_reqTp_descriptor();
template<typename T>
inline const std::string& UserReq_reqTp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserReq_reqTp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserReq_reqTp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserReq_reqTp_descriptor(), enum_t_value);
}
inline bool UserReq_reqTp_Parse(
    const std::string& name, UserReq_reqTp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserReq_reqTp>(
    UserReq_reqTp_descriptor(), name, value);
}
// ===================================================================

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:protos.UserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class FileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.FileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kTpFieldNumber = 4,
    kSizeFieldNumber = 3,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string tp = 4;
  void clear_tp();
  const std::string& tp() const;
  void set_tp(const std::string& value);
  void set_tp(std::string&& value);
  void set_tp(const char* value);
  void set_tp(const char* value, size_t size);
  std::string* mutable_tp();
  std::string* release_tp();
  void set_allocated_tp(std::string* tp);
  private:
  const std::string& _internal_tp() const;
  void _internal_set_tp(const std::string& value);
  std::string* _internal_mutable_tp();
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.FileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class UserReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.UserReq) */ {
 public:
  UserReq();
  virtual ~UserReq();

  UserReq(const UserReq& from);
  UserReq(UserReq&& from) noexcept
    : UserReq() {
    *this = ::std::move(from);
  }

  inline UserReq& operator=(const UserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserReq& operator=(UserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserReq* internal_default_instance() {
    return reinterpret_cast<const UserReq*>(
               &_UserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserReq& a, UserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserReq* New() const final {
    return CreateMaybeMessage<UserReq>(nullptr);
  }

  UserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserReq& from);
  void MergeFrom(const UserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.UserReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserReq_reqTp reqTp;
  static constexpr reqTp regist =
    UserReq_reqTp_regist;
  static constexpr reqTp login =
    UserReq_reqTp_login;
  static constexpr reqTp getFile =
    UserReq_reqTp_getFile;
  static constexpr reqTp uploadFile =
    UserReq_reqTp_uploadFile;
  static constexpr reqTp mkDir =
    UserReq_reqTp_mkDir;
  static inline bool reqTp_IsValid(int value) {
    return UserReq_reqTp_IsValid(value);
  }
  static constexpr reqTp reqTp_MIN =
    UserReq_reqTp_reqTp_MIN;
  static constexpr reqTp reqTp_MAX =
    UserReq_reqTp_reqTp_MAX;
  static constexpr int reqTp_ARRAYSIZE =
    UserReq_reqTp_reqTp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reqTp_descriptor() {
    return UserReq_reqTp_descriptor();
  }
  template<typename T>
  static inline const std::string& reqTp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reqTp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reqTp_Name.");
    return UserReq_reqTp_Name(enum_t_value);
  }
  static inline bool reqTp_Parse(const std::string& name,
      reqTp* value) {
    return UserReq_reqTp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kFileinfoFieldNumber = 3,
    kTpFieldNumber = 1,
  };
  // .protos.UserInfo userInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::protos::UserInfo& userinfo() const;
  ::protos::UserInfo* release_userinfo();
  ::protos::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::protos::UserInfo* userinfo);
  private:
  const ::protos::UserInfo& _internal_userinfo() const;
  ::protos::UserInfo* _internal_mutable_userinfo();
  public:

  // .protos.FileInfo fileinfo = 3;
  bool has_fileinfo() const;
  private:
  bool _internal_has_fileinfo() const;
  public:
  void clear_fileinfo();
  const ::protos::FileInfo& fileinfo() const;
  ::protos::FileInfo* release_fileinfo();
  ::protos::FileInfo* mutable_fileinfo();
  void set_allocated_fileinfo(::protos::FileInfo* fileinfo);
  private:
  const ::protos::FileInfo& _internal_fileinfo() const;
  ::protos::FileInfo* _internal_mutable_fileinfo();
  public:

  // .protos.UserReq.reqTp tp = 1;
  void clear_tp();
  ::protos::UserReq_reqTp tp() const;
  void set_tp(::protos::UserReq_reqTp value);
  private:
  ::protos::UserReq_reqTp _internal_tp() const;
  void _internal_set_tp(::protos::UserReq_reqTp value);
  public:

  // @@protoc_insertion_point(class_scope:protos.UserReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protos::UserInfo* userinfo_;
  ::protos::FileInfo* fileinfo_;
  int tp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string name = 1;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:protos.UserInfo.name)
  return _internal_name();
}
inline void UserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protos.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protos.UserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& UserInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.UserInfo.name)
}
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.UserInfo.name)
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:protos.UserInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.UserInfo.name)
}

// string passwd = 2;
inline void UserInfo::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::passwd() const {
  // @@protoc_insertion_point(field_get:protos.UserInfo.passwd)
  return _internal_passwd();
}
inline void UserInfo::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:protos.UserInfo.passwd)
}
inline std::string* UserInfo::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:protos.UserInfo.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& UserInfo::_internal_passwd() const {
  return passwd_.GetNoArena();
}
inline void UserInfo::_internal_set_passwd(const std::string& value) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfo::set_passwd(std::string&& value) {
  
  passwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.UserInfo.passwd)
}
inline void UserInfo::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.UserInfo.passwd)
}
inline void UserInfo::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.UserInfo.passwd)
}
inline std::string* UserInfo::_internal_mutable_passwd() {
  
  return passwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_passwd() {
  // @@protoc_insertion_point(field_release:protos.UserInfo.passwd)
  
  return passwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:protos.UserInfo.passwd)
}

// -------------------------------------------------------------------

// FileInfo

// string fileName = 1;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.fileName)
  return _internal_filename();
}
inline void FileInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.fileName)
}
inline std::string* FileInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:protos.FileInfo.fileName)
  return _internal_mutable_filename();
}
inline const std::string& FileInfo::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FileInfo::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FileInfo.fileName)
}
inline std::string* FileInfo::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:protos.FileInfo.fileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:protos.FileInfo.fileName)
}

// string path = 2;
inline void FileInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::path() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.path)
  return _internal_path();
}
inline void FileInfo::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.path)
}
inline std::string* FileInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:protos.FileInfo.path)
  return _internal_mutable_path();
}
inline const std::string& FileInfo::_internal_path() const {
  return path_.GetNoArena();
}
inline void FileInfo::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FileInfo.path)
}
inline void FileInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FileInfo.path)
}
inline void FileInfo::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FileInfo.path)
}
inline std::string* FileInfo::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_path() {
  // @@protoc_insertion_point(field_release:protos.FileInfo.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:protos.FileInfo.path)
}

// uint32 size = 3;
inline void FileInfo::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.size)
  return _internal_size();
}
inline void FileInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void FileInfo::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.size)
}

// string tp = 4;
inline void FileInfo::clear_tp() {
  tp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::tp() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.tp)
  return _internal_tp();
}
inline void FileInfo::set_tp(const std::string& value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.tp)
}
inline std::string* FileInfo::mutable_tp() {
  // @@protoc_insertion_point(field_mutable:protos.FileInfo.tp)
  return _internal_mutable_tp();
}
inline const std::string& FileInfo::_internal_tp() const {
  return tp_.GetNoArena();
}
inline void FileInfo::_internal_set_tp(const std::string& value) {
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_tp(std::string&& value) {
  
  tp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FileInfo.tp)
}
inline void FileInfo::set_tp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FileInfo.tp)
}
inline void FileInfo::set_tp(const char* value, size_t size) {
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FileInfo.tp)
}
inline std::string* FileInfo::_internal_mutable_tp() {
  
  return tp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_tp() {
  // @@protoc_insertion_point(field_release:protos.FileInfo.tp)
  
  return tp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_tp(std::string* tp) {
  if (tp != nullptr) {
    
  } else {
    
  }
  tp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tp);
  // @@protoc_insertion_point(field_set_allocated:protos.FileInfo.tp)
}

// -------------------------------------------------------------------

// UserReq

// .protos.UserReq.reqTp tp = 1;
inline void UserReq::clear_tp() {
  tp_ = 0;
}
inline ::protos::UserReq_reqTp UserReq::_internal_tp() const {
  return static_cast< ::protos::UserReq_reqTp >(tp_);
}
inline ::protos::UserReq_reqTp UserReq::tp() const {
  // @@protoc_insertion_point(field_get:protos.UserReq.tp)
  return _internal_tp();
}
inline void UserReq::_internal_set_tp(::protos::UserReq_reqTp value) {
  
  tp_ = value;
}
inline void UserReq::set_tp(::protos::UserReq_reqTp value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:protos.UserReq.tp)
}

// .protos.UserInfo userInfo = 2;
inline bool UserReq::_internal_has_userinfo() const {
  return this != internal_default_instance() && userinfo_ != nullptr;
}
inline bool UserReq::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void UserReq::clear_userinfo() {
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
}
inline const ::protos::UserInfo& UserReq::_internal_userinfo() const {
  const ::protos::UserInfo* p = userinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::UserInfo*>(
      &::protos::_UserInfo_default_instance_);
}
inline const ::protos::UserInfo& UserReq::userinfo() const {
  // @@protoc_insertion_point(field_get:protos.UserReq.userInfo)
  return _internal_userinfo();
}
inline ::protos::UserInfo* UserReq::release_userinfo() {
  // @@protoc_insertion_point(field_release:protos.UserReq.userInfo)
  
  ::protos::UserInfo* temp = userinfo_;
  userinfo_ = nullptr;
  return temp;
}
inline ::protos::UserInfo* UserReq::_internal_mutable_userinfo() {
  
  if (userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::UserInfo>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  return userinfo_;
}
inline ::protos::UserInfo* UserReq::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:protos.UserReq.userInfo)
  return _internal_mutable_userinfo();
}
inline void UserReq::set_allocated_userinfo(::protos::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:protos.UserReq.userInfo)
}

// .protos.FileInfo fileinfo = 3;
inline bool UserReq::_internal_has_fileinfo() const {
  return this != internal_default_instance() && fileinfo_ != nullptr;
}
inline bool UserReq::has_fileinfo() const {
  return _internal_has_fileinfo();
}
inline void UserReq::clear_fileinfo() {
  if (GetArenaNoVirtual() == nullptr && fileinfo_ != nullptr) {
    delete fileinfo_;
  }
  fileinfo_ = nullptr;
}
inline const ::protos::FileInfo& UserReq::_internal_fileinfo() const {
  const ::protos::FileInfo* p = fileinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::FileInfo*>(
      &::protos::_FileInfo_default_instance_);
}
inline const ::protos::FileInfo& UserReq::fileinfo() const {
  // @@protoc_insertion_point(field_get:protos.UserReq.fileinfo)
  return _internal_fileinfo();
}
inline ::protos::FileInfo* UserReq::release_fileinfo() {
  // @@protoc_insertion_point(field_release:protos.UserReq.fileinfo)
  
  ::protos::FileInfo* temp = fileinfo_;
  fileinfo_ = nullptr;
  return temp;
}
inline ::protos::FileInfo* UserReq::_internal_mutable_fileinfo() {
  
  if (fileinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::FileInfo>(GetArenaNoVirtual());
    fileinfo_ = p;
  }
  return fileinfo_;
}
inline ::protos::FileInfo* UserReq::mutable_fileinfo() {
  // @@protoc_insertion_point(field_mutable:protos.UserReq.fileinfo)
  return _internal_mutable_fileinfo();
}
inline void UserReq::set_allocated_fileinfo(::protos::FileInfo* fileinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fileinfo_;
  }
  if (fileinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fileinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileinfo, submessage_arena);
    }
    
  } else {
    
  }
  fileinfo_ = fileinfo;
  // @@protoc_insertion_point(field_set_allocated:protos.UserReq.fileinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protos::UserReq_reqTp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::UserReq_reqTp>() {
  return ::protos::UserReq_reqTp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userReq_2eproto
