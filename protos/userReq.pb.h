// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userReq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userReq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userReq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userReq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userReq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userReq_2eproto;
namespace protos {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FolderInfo;
class FolderInfoDefaultTypeInternal;
extern FolderInfoDefaultTypeInternal _FolderInfo_default_instance_;
class FtpNode;
class FtpNodeDefaultTypeInternal;
extern FtpNodeDefaultTypeInternal _FtpNode_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserQury;
class UserQuryDefaultTypeInternal;
extern UserQuryDefaultTypeInternal _UserQury_default_instance_;
class UserReq;
class UserReqDefaultTypeInternal;
extern UserReqDefaultTypeInternal _UserReq_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::FileInfo* Arena::CreateMaybeMessage<::protos::FileInfo>(Arena*);
template<> ::protos::FolderInfo* Arena::CreateMaybeMessage<::protos::FolderInfo>(Arena*);
template<> ::protos::FtpNode* Arena::CreateMaybeMessage<::protos::FtpNode>(Arena*);
template<> ::protos::Table* Arena::CreateMaybeMessage<::protos::Table>(Arena*);
template<> ::protos::UserInfo* Arena::CreateMaybeMessage<::protos::UserInfo>(Arena*);
template<> ::protos::UserQury* Arena::CreateMaybeMessage<::protos::UserQury>(Arena*);
template<> ::protos::UserReq* Arena::CreateMaybeMessage<::protos::UserReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

enum UserReq_reqTp : int {
  UserReq_reqTp_REGIST = 0,
  UserReq_reqTp_LOGIN = 1,
  UserReq_reqTp_DOWNLOAD = 2,
  UserReq_reqTp_UPLOAD = 3,
  UserReq_reqTp_MKDIR = 4,
  UserReq_reqTp_DELFILE = 5,
  UserReq_reqTp_DELFOLDER = 6,
  UserReq_reqTp_UserReq_reqTp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserReq_reqTp_UserReq_reqTp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserReq_reqTp_IsValid(int value);
constexpr UserReq_reqTp UserReq_reqTp_reqTp_MIN = UserReq_reqTp_REGIST;
constexpr UserReq_reqTp UserReq_reqTp_reqTp_MAX = UserReq_reqTp_DELFOLDER;
constexpr int UserReq_reqTp_reqTp_ARRAYSIZE = UserReq_reqTp_reqTp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserReq_reqTp_descriptor();
template<typename T>
inline const std::string& UserReq_reqTp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserReq_reqTp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserReq_reqTp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserReq_reqTp_descriptor(), enum_t_value);
}
inline bool UserReq_reqTp_Parse(
    const std::string& name, UserReq_reqTp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserReq_reqTp>(
    UserReq_reqTp_descriptor(), name, value);
}
enum UserQury_Type : int {
  UserQury_Type_REGIST = 0,
  UserQury_Type_LOGIN = 1,
  UserQury_Type_DOWNLOAD = 3,
  UserQury_Type_UPLOAD = 4,
  UserQury_Type_MKDIR = 5,
  UserQury_Type_DELFILE = 6,
  UserQury_Type_DELFOLDER = 7,
  UserQury_Type_ELSE = 8,
  UserQury_Type_UserQury_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserQury_Type_UserQury_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserQury_Type_IsValid(int value);
constexpr UserQury_Type UserQury_Type_Type_MIN = UserQury_Type_REGIST;
constexpr UserQury_Type UserQury_Type_Type_MAX = UserQury_Type_ELSE;
constexpr int UserQury_Type_Type_ARRAYSIZE = UserQury_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserQury_Type_descriptor();
template<typename T>
inline const std::string& UserQury_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserQury_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserQury_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserQury_Type_descriptor(), enum_t_value);
}
inline bool UserQury_Type_Parse(
    const std::string& name, UserQury_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserQury_Type>(
    UserQury_Type_descriptor(), name, value);
}
// ===================================================================

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:protos.UserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class FileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.FileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kTpFieldNumber = 4,
    kTimeFieldNumber = 5,
    kSizeFieldNumber = 3,
    kIflastFieldNumber = 6,
    kFidFieldNumber = 7,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string tp = 4;
  void clear_tp();
  const std::string& tp() const;
  void set_tp(const std::string& value);
  void set_tp(std::string&& value);
  void set_tp(const char* value);
  void set_tp(const char* value, size_t size);
  std::string* mutable_tp();
  std::string* release_tp();
  void set_allocated_tp(std::string* tp);
  private:
  const std::string& _internal_tp() const;
  void _internal_set_tp(const std::string& value);
  std::string* _internal_mutable_tp();
  public:

  // string time = 5;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iflast = 6;
  void clear_iflast();
  ::PROTOBUF_NAMESPACE_ID::uint32 iflast() const;
  void set_iflast(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iflast() const;
  void _internal_set_iflast(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fid = 7;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.FileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iflast_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class UserReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.UserReq) */ {
 public:
  UserReq();
  virtual ~UserReq();

  UserReq(const UserReq& from);
  UserReq(UserReq&& from) noexcept
    : UserReq() {
    *this = ::std::move(from);
  }

  inline UserReq& operator=(const UserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserReq& operator=(UserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserReq* internal_default_instance() {
    return reinterpret_cast<const UserReq*>(
               &_UserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserReq& a, UserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserReq* New() const final {
    return CreateMaybeMessage<UserReq>(nullptr);
  }

  UserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserReq& from);
  void MergeFrom(const UserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.UserReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserReq_reqTp reqTp;
  static constexpr reqTp REGIST =
    UserReq_reqTp_REGIST;
  static constexpr reqTp LOGIN =
    UserReq_reqTp_LOGIN;
  static constexpr reqTp DOWNLOAD =
    UserReq_reqTp_DOWNLOAD;
  static constexpr reqTp UPLOAD =
    UserReq_reqTp_UPLOAD;
  static constexpr reqTp MKDIR =
    UserReq_reqTp_MKDIR;
  static constexpr reqTp DELFILE =
    UserReq_reqTp_DELFILE;
  static constexpr reqTp DELFOLDER =
    UserReq_reqTp_DELFOLDER;
  static inline bool reqTp_IsValid(int value) {
    return UserReq_reqTp_IsValid(value);
  }
  static constexpr reqTp reqTp_MIN =
    UserReq_reqTp_reqTp_MIN;
  static constexpr reqTp reqTp_MAX =
    UserReq_reqTp_reqTp_MAX;
  static constexpr int reqTp_ARRAYSIZE =
    UserReq_reqTp_reqTp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reqTp_descriptor() {
    return UserReq_reqTp_descriptor();
  }
  template<typename T>
  static inline const std::string& reqTp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reqTp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reqTp_Name.");
    return UserReq_reqTp_Name(enum_t_value);
  }
  static inline bool reqTp_Parse(const std::string& name,
      reqTp* value) {
    return UserReq_reqTp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kFileinfoFieldNumber = 3,
    kTpFieldNumber = 1,
  };
  // .protos.UserInfo userInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::protos::UserInfo& userinfo() const;
  ::protos::UserInfo* release_userinfo();
  ::protos::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::protos::UserInfo* userinfo);
  private:
  const ::protos::UserInfo& _internal_userinfo() const;
  ::protos::UserInfo* _internal_mutable_userinfo();
  public:

  // .protos.FileInfo fileinfo = 3;
  bool has_fileinfo() const;
  private:
  bool _internal_has_fileinfo() const;
  public:
  void clear_fileinfo();
  const ::protos::FileInfo& fileinfo() const;
  ::protos::FileInfo* release_fileinfo();
  ::protos::FileInfo* mutable_fileinfo();
  void set_allocated_fileinfo(::protos::FileInfo* fileinfo);
  private:
  const ::protos::FileInfo& _internal_fileinfo() const;
  ::protos::FileInfo* _internal_mutable_fileinfo();
  public:

  // .protos.UserReq.reqTp tp = 1;
  void clear_tp();
  ::protos::UserReq_reqTp tp() const;
  void set_tp(::protos::UserReq_reqTp value);
  private:
  ::protos::UserReq_reqTp _internal_tp() const;
  void _internal_set_tp(::protos::UserReq_reqTp value);
  public:

  // @@protoc_insertion_point(class_scope:protos.UserReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protos::UserInfo* userinfo_;
  ::protos::FileInfo* fileinfo_;
  int tp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class FtpNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.FtpNode) */ {
 public:
  FtpNode();
  virtual ~FtpNode();

  FtpNode(const FtpNode& from);
  FtpNode(FtpNode&& from) noexcept
    : FtpNode() {
    *this = ::std::move(from);
  }

  inline FtpNode& operator=(const FtpNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtpNode& operator=(FtpNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FtpNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtpNode* internal_default_instance() {
    return reinterpret_cast<const FtpNode*>(
               &_FtpNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FtpNode& a, FtpNode& b) {
    a.Swap(&b);
  }
  inline void Swap(FtpNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtpNode* New() const final {
    return CreateMaybeMessage<FtpNode>(nullptr);
  }

  FtpNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtpNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FtpNode& from);
  void MergeFrom(const FtpNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtpNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.FtpNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kNonceFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string nonce = 3;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.FtpNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class FolderInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.FolderInfo) */ {
 public:
  FolderInfo();
  virtual ~FolderInfo();

  FolderInfo(const FolderInfo& from);
  FolderInfo(FolderInfo&& from) noexcept
    : FolderInfo() {
    *this = ::std::move(from);
  }

  inline FolderInfo& operator=(const FolderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FolderInfo& operator=(FolderInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FolderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FolderInfo* internal_default_instance() {
    return reinterpret_cast<const FolderInfo*>(
               &_FolderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FolderInfo& a, FolderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FolderInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FolderInfo* New() const final {
    return CreateMaybeMessage<FolderInfo>(nullptr);
  }

  FolderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FolderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FolderInfo& from);
  void MergeFrom(const FolderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FolderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.FolderInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kPathFieldNumber = 4,
    kTpFieldNumber = 7,
    kTimeFieldNumber = 8,
    kFidFieldNumber = 1,
    kFindexFieldNumber = 5,
    kSzFieldNumber = 6,
    kIflastFieldNumber = 9,
  };
  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string tp = 7;
  void clear_tp();
  const std::string& tp() const;
  void set_tp(const std::string& value);
  void set_tp(std::string&& value);
  void set_tp(const char* value);
  void set_tp(const char* value, size_t size);
  std::string* mutable_tp();
  std::string* release_tp();
  void set_allocated_tp(std::string* tp);
  private:
  const std::string& _internal_tp() const;
  void _internal_set_tp(const std::string& value);
  std::string* _internal_mutable_tp();
  public:

  // string time = 8;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // uint32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 findex = 5;
  void clear_findex();
  ::PROTOBUF_NAMESPACE_ID::uint32 findex() const;
  void set_findex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_findex() const;
  void _internal_set_findex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sz = 6;
  void clear_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 sz() const;
  void set_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sz() const;
  void _internal_set_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 iflast = 9;
  void clear_iflast();
  ::PROTOBUF_NAMESPACE_ID::int32 iflast() const;
  void set_iflast(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iflast() const;
  void _internal_set_iflast(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.FolderInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 findex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sz_;
  ::PROTOBUF_NAMESPACE_ID::int32 iflast_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class Table :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(nullptr);
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Table";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // repeated int32 entry = 1;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entry(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_entry() const;
  void _internal_add_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_entry();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 entry(int index) const;
  void set_entry(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      entry() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:protos.Table)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > entry_;
  mutable std::atomic<int> _entry_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// -------------------------------------------------------------------

class UserQury :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.UserQury) */ {
 public:
  UserQury();
  virtual ~UserQury();

  UserQury(const UserQury& from);
  UserQury(UserQury&& from) noexcept
    : UserQury() {
    *this = ::std::move(from);
  }

  inline UserQury& operator=(const UserQury& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQury& operator=(UserQury&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserQury& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserQury* internal_default_instance() {
    return reinterpret_cast<const UserQury*>(
               &_UserQury_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserQury& a, UserQury& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQury* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserQury* New() const final {
    return CreateMaybeMessage<UserQury>(nullptr);
  }

  UserQury* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserQury>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserQury& from);
  void MergeFrom(const UserQury& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQury* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.UserQury";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userReq_2eproto);
    return ::descriptor_table_userReq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserQury_Type Type;
  static constexpr Type REGIST =
    UserQury_Type_REGIST;
  static constexpr Type LOGIN =
    UserQury_Type_LOGIN;
  static constexpr Type DOWNLOAD =
    UserQury_Type_DOWNLOAD;
  static constexpr Type UPLOAD =
    UserQury_Type_UPLOAD;
  static constexpr Type MKDIR =
    UserQury_Type_MKDIR;
  static constexpr Type DELFILE =
    UserQury_Type_DELFILE;
  static constexpr Type DELFOLDER =
    UserQury_Type_DELFOLDER;
  static constexpr Type ELSE =
    UserQury_Type_ELSE;
  static inline bool Type_IsValid(int value) {
    return UserQury_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    UserQury_Type_Type_MIN;
  static constexpr Type Type_MAX =
    UserQury_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    UserQury_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return UserQury_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return UserQury_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return UserQury_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFtpsFieldNumber = 5,
    kFolderFieldNumber = 6,
    kFileTableFieldNumber = 7,
    kTpFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kFidFieldNumber = 3,
  };
  // repeated .protos.FtpNode ftps = 5;
  int ftps_size() const;
  private:
  int _internal_ftps_size() const;
  public:
  void clear_ftps();
  ::protos::FtpNode* mutable_ftps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FtpNode >*
      mutable_ftps();
  private:
  const ::protos::FtpNode& _internal_ftps(int index) const;
  ::protos::FtpNode* _internal_add_ftps();
  public:
  const ::protos::FtpNode& ftps(int index) const;
  ::protos::FtpNode* add_ftps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FtpNode >&
      ftps() const;

  // repeated .protos.FolderInfo folder = 6;
  int folder_size() const;
  private:
  int _internal_folder_size() const;
  public:
  void clear_folder();
  ::protos::FolderInfo* mutable_folder(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FolderInfo >*
      mutable_folder();
  private:
  const ::protos::FolderInfo& _internal_folder(int index) const;
  ::protos::FolderInfo* _internal_add_folder();
  public:
  const ::protos::FolderInfo& folder(int index) const;
  ::protos::FolderInfo* add_folder();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FolderInfo >&
      folder() const;

  // .protos.Table fileTable = 7;
  bool has_filetable() const;
  private:
  bool _internal_has_filetable() const;
  public:
  void clear_filetable();
  const ::protos::Table& filetable() const;
  ::protos::Table* release_filetable();
  ::protos::Table* mutable_filetable();
  void set_allocated_filetable(::protos::Table* filetable);
  private:
  const ::protos::Table& _internal_filetable() const;
  ::protos::Table* _internal_mutable_filetable();
  public:

  // .protos.UserQury.Type tp = 1;
  void clear_tp();
  ::protos::UserQury_Type tp() const;
  void set_tp(::protos::UserQury_Type value);
  private:
  ::protos::UserQury_Type _internal_tp() const;
  void _internal_set_tp(::protos::UserQury_Type value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 fid = 3;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.UserQury)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FtpNode > ftps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FolderInfo > folder_;
  ::protos::Table* filetable_;
  int tp_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userReq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string name = 1;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:protos.UserInfo.name)
  return _internal_name();
}
inline void UserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protos.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protos.UserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& UserInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.UserInfo.name)
}
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.UserInfo.name)
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:protos.UserInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.UserInfo.name)
}

// string passwd = 2;
inline void UserInfo::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::passwd() const {
  // @@protoc_insertion_point(field_get:protos.UserInfo.passwd)
  return _internal_passwd();
}
inline void UserInfo::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:protos.UserInfo.passwd)
}
inline std::string* UserInfo::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:protos.UserInfo.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& UserInfo::_internal_passwd() const {
  return passwd_.GetNoArena();
}
inline void UserInfo::_internal_set_passwd(const std::string& value) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserInfo::set_passwd(std::string&& value) {
  
  passwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.UserInfo.passwd)
}
inline void UserInfo::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.UserInfo.passwd)
}
inline void UserInfo::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.UserInfo.passwd)
}
inline std::string* UserInfo::_internal_mutable_passwd() {
  
  return passwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_passwd() {
  // @@protoc_insertion_point(field_release:protos.UserInfo.passwd)
  
  return passwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:protos.UserInfo.passwd)
}

// -------------------------------------------------------------------

// FileInfo

// string fileName = 1;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.fileName)
  return _internal_filename();
}
inline void FileInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.fileName)
}
inline std::string* FileInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:protos.FileInfo.fileName)
  return _internal_mutable_filename();
}
inline const std::string& FileInfo::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FileInfo::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FileInfo.fileName)
}
inline std::string* FileInfo::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:protos.FileInfo.fileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:protos.FileInfo.fileName)
}

// string path = 2;
inline void FileInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::path() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.path)
  return _internal_path();
}
inline void FileInfo::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.path)
}
inline std::string* FileInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:protos.FileInfo.path)
  return _internal_mutable_path();
}
inline const std::string& FileInfo::_internal_path() const {
  return path_.GetNoArena();
}
inline void FileInfo::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FileInfo.path)
}
inline void FileInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FileInfo.path)
}
inline void FileInfo::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FileInfo.path)
}
inline std::string* FileInfo::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_path() {
  // @@protoc_insertion_point(field_release:protos.FileInfo.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:protos.FileInfo.path)
}

// uint32 size = 3;
inline void FileInfo::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.size)
  return _internal_size();
}
inline void FileInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void FileInfo::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.size)
}

// string tp = 4;
inline void FileInfo::clear_tp() {
  tp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::tp() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.tp)
  return _internal_tp();
}
inline void FileInfo::set_tp(const std::string& value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.tp)
}
inline std::string* FileInfo::mutable_tp() {
  // @@protoc_insertion_point(field_mutable:protos.FileInfo.tp)
  return _internal_mutable_tp();
}
inline const std::string& FileInfo::_internal_tp() const {
  return tp_.GetNoArena();
}
inline void FileInfo::_internal_set_tp(const std::string& value) {
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_tp(std::string&& value) {
  
  tp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FileInfo.tp)
}
inline void FileInfo::set_tp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FileInfo.tp)
}
inline void FileInfo::set_tp(const char* value, size_t size) {
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FileInfo.tp)
}
inline std::string* FileInfo::_internal_mutable_tp() {
  
  return tp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_tp() {
  // @@protoc_insertion_point(field_release:protos.FileInfo.tp)
  
  return tp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_tp(std::string* tp) {
  if (tp != nullptr) {
    
  } else {
    
  }
  tp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tp);
  // @@protoc_insertion_point(field_set_allocated:protos.FileInfo.tp)
}

// string time = 5;
inline void FileInfo::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::time() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.time)
  return _internal_time();
}
inline void FileInfo::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.time)
}
inline std::string* FileInfo::mutable_time() {
  // @@protoc_insertion_point(field_mutable:protos.FileInfo.time)
  return _internal_mutable_time();
}
inline const std::string& FileInfo::_internal_time() const {
  return time_.GetNoArena();
}
inline void FileInfo::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileInfo::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FileInfo.time)
}
inline void FileInfo::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FileInfo.time)
}
inline void FileInfo::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FileInfo.time)
}
inline std::string* FileInfo::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_time() {
  // @@protoc_insertion_point(field_release:protos.FileInfo.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:protos.FileInfo.time)
}

// uint32 iflast = 6;
inline void FileInfo::clear_iflast() {
  iflast_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::_internal_iflast() const {
  return iflast_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::iflast() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.iflast)
  return _internal_iflast();
}
inline void FileInfo::_internal_set_iflast(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iflast_ = value;
}
inline void FileInfo::set_iflast(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iflast(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.iflast)
}

// uint32 fid = 7;
inline void FileInfo::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileInfo::fid() const {
  // @@protoc_insertion_point(field_get:protos.FileInfo.fid)
  return _internal_fid();
}
inline void FileInfo::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void FileInfo::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:protos.FileInfo.fid)
}

// -------------------------------------------------------------------

// UserReq

// .protos.UserReq.reqTp tp = 1;
inline void UserReq::clear_tp() {
  tp_ = 0;
}
inline ::protos::UserReq_reqTp UserReq::_internal_tp() const {
  return static_cast< ::protos::UserReq_reqTp >(tp_);
}
inline ::protos::UserReq_reqTp UserReq::tp() const {
  // @@protoc_insertion_point(field_get:protos.UserReq.tp)
  return _internal_tp();
}
inline void UserReq::_internal_set_tp(::protos::UserReq_reqTp value) {
  
  tp_ = value;
}
inline void UserReq::set_tp(::protos::UserReq_reqTp value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:protos.UserReq.tp)
}

// .protos.UserInfo userInfo = 2;
inline bool UserReq::_internal_has_userinfo() const {
  return this != internal_default_instance() && userinfo_ != nullptr;
}
inline bool UserReq::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void UserReq::clear_userinfo() {
  if (GetArenaNoVirtual() == nullptr && userinfo_ != nullptr) {
    delete userinfo_;
  }
  userinfo_ = nullptr;
}
inline const ::protos::UserInfo& UserReq::_internal_userinfo() const {
  const ::protos::UserInfo* p = userinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::UserInfo*>(
      &::protos::_UserInfo_default_instance_);
}
inline const ::protos::UserInfo& UserReq::userinfo() const {
  // @@protoc_insertion_point(field_get:protos.UserReq.userInfo)
  return _internal_userinfo();
}
inline ::protos::UserInfo* UserReq::release_userinfo() {
  // @@protoc_insertion_point(field_release:protos.UserReq.userInfo)
  
  ::protos::UserInfo* temp = userinfo_;
  userinfo_ = nullptr;
  return temp;
}
inline ::protos::UserInfo* UserReq::_internal_mutable_userinfo() {
  
  if (userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::UserInfo>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  return userinfo_;
}
inline ::protos::UserInfo* UserReq::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable:protos.UserReq.userInfo)
  return _internal_mutable_userinfo();
}
inline void UserReq::set_allocated_userinfo(::protos::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:protos.UserReq.userInfo)
}

// .protos.FileInfo fileinfo = 3;
inline bool UserReq::_internal_has_fileinfo() const {
  return this != internal_default_instance() && fileinfo_ != nullptr;
}
inline bool UserReq::has_fileinfo() const {
  return _internal_has_fileinfo();
}
inline void UserReq::clear_fileinfo() {
  if (GetArenaNoVirtual() == nullptr && fileinfo_ != nullptr) {
    delete fileinfo_;
  }
  fileinfo_ = nullptr;
}
inline const ::protos::FileInfo& UserReq::_internal_fileinfo() const {
  const ::protos::FileInfo* p = fileinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::FileInfo*>(
      &::protos::_FileInfo_default_instance_);
}
inline const ::protos::FileInfo& UserReq::fileinfo() const {
  // @@protoc_insertion_point(field_get:protos.UserReq.fileinfo)
  return _internal_fileinfo();
}
inline ::protos::FileInfo* UserReq::release_fileinfo() {
  // @@protoc_insertion_point(field_release:protos.UserReq.fileinfo)
  
  ::protos::FileInfo* temp = fileinfo_;
  fileinfo_ = nullptr;
  return temp;
}
inline ::protos::FileInfo* UserReq::_internal_mutable_fileinfo() {
  
  if (fileinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::FileInfo>(GetArenaNoVirtual());
    fileinfo_ = p;
  }
  return fileinfo_;
}
inline ::protos::FileInfo* UserReq::mutable_fileinfo() {
  // @@protoc_insertion_point(field_mutable:protos.UserReq.fileinfo)
  return _internal_mutable_fileinfo();
}
inline void UserReq::set_allocated_fileinfo(::protos::FileInfo* fileinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fileinfo_;
  }
  if (fileinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fileinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileinfo, submessage_arena);
    }
    
  } else {
    
  }
  fileinfo_ = fileinfo;
  // @@protoc_insertion_point(field_set_allocated:protos.UserReq.fileinfo)
}

// -------------------------------------------------------------------

// FtpNode

// string ip = 1;
inline void FtpNode::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FtpNode::ip() const {
  // @@protoc_insertion_point(field_get:protos.FtpNode.ip)
  return _internal_ip();
}
inline void FtpNode::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:protos.FtpNode.ip)
}
inline std::string* FtpNode::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:protos.FtpNode.ip)
  return _internal_mutable_ip();
}
inline const std::string& FtpNode::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void FtpNode::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FtpNode::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FtpNode.ip)
}
inline void FtpNode::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FtpNode.ip)
}
inline void FtpNode::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FtpNode.ip)
}
inline std::string* FtpNode::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FtpNode::release_ip() {
  // @@protoc_insertion_point(field_release:protos.FtpNode.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FtpNode::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protos.FtpNode.ip)
}

// uint32 port = 2;
inline void FtpNode::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtpNode::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FtpNode::port() const {
  // @@protoc_insertion_point(field_get:protos.FtpNode.port)
  return _internal_port();
}
inline void FtpNode::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void FtpNode::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:protos.FtpNode.port)
}

// string nonce = 3;
inline void FtpNode::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FtpNode::nonce() const {
  // @@protoc_insertion_point(field_get:protos.FtpNode.nonce)
  return _internal_nonce();
}
inline void FtpNode::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:protos.FtpNode.nonce)
}
inline std::string* FtpNode::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:protos.FtpNode.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& FtpNode::_internal_nonce() const {
  return nonce_.GetNoArena();
}
inline void FtpNode::_internal_set_nonce(const std::string& value) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FtpNode::set_nonce(std::string&& value) {
  
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FtpNode.nonce)
}
inline void FtpNode::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FtpNode.nonce)
}
inline void FtpNode::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FtpNode.nonce)
}
inline std::string* FtpNode::_internal_mutable_nonce() {
  
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FtpNode::release_nonce() {
  // @@protoc_insertion_point(field_release:protos.FtpNode.nonce)
  
  return nonce_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FtpNode::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:protos.FtpNode.nonce)
}

// -------------------------------------------------------------------

// FolderInfo

// uint32 fid = 1;
inline void FolderInfo::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FolderInfo::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FolderInfo::fid() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.fid)
  return _internal_fid();
}
inline void FolderInfo::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void FolderInfo::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.fid)
}

// string filename = 2;
inline void FolderInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FolderInfo::filename() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.filename)
  return _internal_filename();
}
inline void FolderInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.filename)
}
inline std::string* FolderInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:protos.FolderInfo.filename)
  return _internal_mutable_filename();
}
inline const std::string& FolderInfo::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FolderInfo::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FolderInfo::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FolderInfo.filename)
}
inline void FolderInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FolderInfo.filename)
}
inline void FolderInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FolderInfo.filename)
}
inline std::string* FolderInfo::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FolderInfo::release_filename() {
  // @@protoc_insertion_point(field_release:protos.FolderInfo.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FolderInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:protos.FolderInfo.filename)
}

// string username = 3;
inline void FolderInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FolderInfo::username() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.username)
  return _internal_username();
}
inline void FolderInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.username)
}
inline std::string* FolderInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:protos.FolderInfo.username)
  return _internal_mutable_username();
}
inline const std::string& FolderInfo::_internal_username() const {
  return username_.GetNoArena();
}
inline void FolderInfo::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FolderInfo::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FolderInfo.username)
}
inline void FolderInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FolderInfo.username)
}
inline void FolderInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FolderInfo.username)
}
inline std::string* FolderInfo::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FolderInfo::release_username() {
  // @@protoc_insertion_point(field_release:protos.FolderInfo.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FolderInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:protos.FolderInfo.username)
}

// string path = 4;
inline void FolderInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FolderInfo::path() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.path)
  return _internal_path();
}
inline void FolderInfo::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.path)
}
inline std::string* FolderInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:protos.FolderInfo.path)
  return _internal_mutable_path();
}
inline const std::string& FolderInfo::_internal_path() const {
  return path_.GetNoArena();
}
inline void FolderInfo::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FolderInfo::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FolderInfo.path)
}
inline void FolderInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FolderInfo.path)
}
inline void FolderInfo::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FolderInfo.path)
}
inline std::string* FolderInfo::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FolderInfo::release_path() {
  // @@protoc_insertion_point(field_release:protos.FolderInfo.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FolderInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:protos.FolderInfo.path)
}

// uint32 findex = 5;
inline void FolderInfo::clear_findex() {
  findex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FolderInfo::_internal_findex() const {
  return findex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FolderInfo::findex() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.findex)
  return _internal_findex();
}
inline void FolderInfo::_internal_set_findex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  findex_ = value;
}
inline void FolderInfo::set_findex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_findex(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.findex)
}

// uint32 sz = 6;
inline void FolderInfo::clear_sz() {
  sz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FolderInfo::_internal_sz() const {
  return sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FolderInfo::sz() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.sz)
  return _internal_sz();
}
inline void FolderInfo::_internal_set_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sz_ = value;
}
inline void FolderInfo::set_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sz(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.sz)
}

// string tp = 7;
inline void FolderInfo::clear_tp() {
  tp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FolderInfo::tp() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.tp)
  return _internal_tp();
}
inline void FolderInfo::set_tp(const std::string& value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.tp)
}
inline std::string* FolderInfo::mutable_tp() {
  // @@protoc_insertion_point(field_mutable:protos.FolderInfo.tp)
  return _internal_mutable_tp();
}
inline const std::string& FolderInfo::_internal_tp() const {
  return tp_.GetNoArena();
}
inline void FolderInfo::_internal_set_tp(const std::string& value) {
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FolderInfo::set_tp(std::string&& value) {
  
  tp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FolderInfo.tp)
}
inline void FolderInfo::set_tp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FolderInfo.tp)
}
inline void FolderInfo::set_tp(const char* value, size_t size) {
  
  tp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FolderInfo.tp)
}
inline std::string* FolderInfo::_internal_mutable_tp() {
  
  return tp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FolderInfo::release_tp() {
  // @@protoc_insertion_point(field_release:protos.FolderInfo.tp)
  
  return tp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FolderInfo::set_allocated_tp(std::string* tp) {
  if (tp != nullptr) {
    
  } else {
    
  }
  tp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tp);
  // @@protoc_insertion_point(field_set_allocated:protos.FolderInfo.tp)
}

// string time = 8;
inline void FolderInfo::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FolderInfo::time() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.time)
  return _internal_time();
}
inline void FolderInfo::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.time)
}
inline std::string* FolderInfo::mutable_time() {
  // @@protoc_insertion_point(field_mutable:protos.FolderInfo.time)
  return _internal_mutable_time();
}
inline const std::string& FolderInfo::_internal_time() const {
  return time_.GetNoArena();
}
inline void FolderInfo::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FolderInfo::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.FolderInfo.time)
}
inline void FolderInfo::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.FolderInfo.time)
}
inline void FolderInfo::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.FolderInfo.time)
}
inline std::string* FolderInfo::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FolderInfo::release_time() {
  // @@protoc_insertion_point(field_release:protos.FolderInfo.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FolderInfo::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:protos.FolderInfo.time)
}

// int32 iflast = 9;
inline void FolderInfo::clear_iflast() {
  iflast_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FolderInfo::_internal_iflast() const {
  return iflast_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FolderInfo::iflast() const {
  // @@protoc_insertion_point(field_get:protos.FolderInfo.iflast)
  return _internal_iflast();
}
inline void FolderInfo::_internal_set_iflast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iflast_ = value;
}
inline void FolderInfo::set_iflast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iflast(value);
  // @@protoc_insertion_point(field_set:protos.FolderInfo.iflast)
}

// -------------------------------------------------------------------

// Table

// repeated int32 entry = 1;
inline int Table::_internal_entry_size() const {
  return entry_.size();
}
inline int Table::entry_size() const {
  return _internal_entry_size();
}
inline void Table::clear_entry() {
  entry_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Table::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Table::entry(int index) const {
  // @@protoc_insertion_point(field_get:protos.Table.entry)
  return _internal_entry(index);
}
inline void Table::set_entry(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  entry_.Set(index, value);
  // @@protoc_insertion_point(field_set:protos.Table.entry)
}
inline void Table::_internal_add_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  entry_.Add(value);
}
inline void Table::add_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_entry(value);
  // @@protoc_insertion_point(field_add:protos.Table.entry)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Table::_internal_entry() const {
  return entry_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Table::entry() const {
  // @@protoc_insertion_point(field_list:protos.Table.entry)
  return _internal_entry();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Table::_internal_mutable_entry() {
  return &entry_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Table::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:protos.Table.entry)
  return _internal_mutable_entry();
}

// -------------------------------------------------------------------

// UserQury

// .protos.UserQury.Type tp = 1;
inline void UserQury::clear_tp() {
  tp_ = 0;
}
inline ::protos::UserQury_Type UserQury::_internal_tp() const {
  return static_cast< ::protos::UserQury_Type >(tp_);
}
inline ::protos::UserQury_Type UserQury::tp() const {
  // @@protoc_insertion_point(field_get:protos.UserQury.tp)
  return _internal_tp();
}
inline void UserQury::_internal_set_tp(::protos::UserQury_Type value) {
  
  tp_ = value;
}
inline void UserQury::set_tp(::protos::UserQury_Type value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:protos.UserQury.tp)
}

// bool success = 2;
inline void UserQury::clear_success() {
  success_ = false;
}
inline bool UserQury::_internal_success() const {
  return success_;
}
inline bool UserQury::success() const {
  // @@protoc_insertion_point(field_get:protos.UserQury.success)
  return _internal_success();
}
inline void UserQury::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UserQury::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protos.UserQury.success)
}

// int32 fid = 3;
inline void UserQury::clear_fid() {
  fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserQury::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserQury::fid() const {
  // @@protoc_insertion_point(field_get:protos.UserQury.fid)
  return _internal_fid();
}
inline void UserQury::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fid_ = value;
}
inline void UserQury::set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:protos.UserQury.fid)
}

// repeated .protos.FtpNode ftps = 5;
inline int UserQury::_internal_ftps_size() const {
  return ftps_.size();
}
inline int UserQury::ftps_size() const {
  return _internal_ftps_size();
}
inline void UserQury::clear_ftps() {
  ftps_.Clear();
}
inline ::protos::FtpNode* UserQury::mutable_ftps(int index) {
  // @@protoc_insertion_point(field_mutable:protos.UserQury.ftps)
  return ftps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FtpNode >*
UserQury::mutable_ftps() {
  // @@protoc_insertion_point(field_mutable_list:protos.UserQury.ftps)
  return &ftps_;
}
inline const ::protos::FtpNode& UserQury::_internal_ftps(int index) const {
  return ftps_.Get(index);
}
inline const ::protos::FtpNode& UserQury::ftps(int index) const {
  // @@protoc_insertion_point(field_get:protos.UserQury.ftps)
  return _internal_ftps(index);
}
inline ::protos::FtpNode* UserQury::_internal_add_ftps() {
  return ftps_.Add();
}
inline ::protos::FtpNode* UserQury::add_ftps() {
  // @@protoc_insertion_point(field_add:protos.UserQury.ftps)
  return _internal_add_ftps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FtpNode >&
UserQury::ftps() const {
  // @@protoc_insertion_point(field_list:protos.UserQury.ftps)
  return ftps_;
}

// repeated .protos.FolderInfo folder = 6;
inline int UserQury::_internal_folder_size() const {
  return folder_.size();
}
inline int UserQury::folder_size() const {
  return _internal_folder_size();
}
inline void UserQury::clear_folder() {
  folder_.Clear();
}
inline ::protos::FolderInfo* UserQury::mutable_folder(int index) {
  // @@protoc_insertion_point(field_mutable:protos.UserQury.folder)
  return folder_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FolderInfo >*
UserQury::mutable_folder() {
  // @@protoc_insertion_point(field_mutable_list:protos.UserQury.folder)
  return &folder_;
}
inline const ::protos::FolderInfo& UserQury::_internal_folder(int index) const {
  return folder_.Get(index);
}
inline const ::protos::FolderInfo& UserQury::folder(int index) const {
  // @@protoc_insertion_point(field_get:protos.UserQury.folder)
  return _internal_folder(index);
}
inline ::protos::FolderInfo* UserQury::_internal_add_folder() {
  return folder_.Add();
}
inline ::protos::FolderInfo* UserQury::add_folder() {
  // @@protoc_insertion_point(field_add:protos.UserQury.folder)
  return _internal_add_folder();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::FolderInfo >&
UserQury::folder() const {
  // @@protoc_insertion_point(field_list:protos.UserQury.folder)
  return folder_;
}

// .protos.Table fileTable = 7;
inline bool UserQury::_internal_has_filetable() const {
  return this != internal_default_instance() && filetable_ != nullptr;
}
inline bool UserQury::has_filetable() const {
  return _internal_has_filetable();
}
inline void UserQury::clear_filetable() {
  if (GetArenaNoVirtual() == nullptr && filetable_ != nullptr) {
    delete filetable_;
  }
  filetable_ = nullptr;
}
inline const ::protos::Table& UserQury::_internal_filetable() const {
  const ::protos::Table* p = filetable_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::Table*>(
      &::protos::_Table_default_instance_);
}
inline const ::protos::Table& UserQury::filetable() const {
  // @@protoc_insertion_point(field_get:protos.UserQury.fileTable)
  return _internal_filetable();
}
inline ::protos::Table* UserQury::release_filetable() {
  // @@protoc_insertion_point(field_release:protos.UserQury.fileTable)
  
  ::protos::Table* temp = filetable_;
  filetable_ = nullptr;
  return temp;
}
inline ::protos::Table* UserQury::_internal_mutable_filetable() {
  
  if (filetable_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::Table>(GetArenaNoVirtual());
    filetable_ = p;
  }
  return filetable_;
}
inline ::protos::Table* UserQury::mutable_filetable() {
  // @@protoc_insertion_point(field_mutable:protos.UserQury.fileTable)
  return _internal_mutable_filetable();
}
inline void UserQury::set_allocated_filetable(::protos::Table* filetable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete filetable_;
  }
  if (filetable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filetable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filetable, submessage_arena);
    }
    
  } else {
    
  }
  filetable_ = filetable;
  // @@protoc_insertion_point(field_set_allocated:protos.UserQury.fileTable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protos::UserReq_reqTp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::UserReq_reqTp>() {
  return ::protos::UserReq_reqTp_descriptor();
}
template <> struct is_proto_enum< ::protos::UserQury_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::UserQury_Type>() {
  return ::protos::UserQury_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userReq_2eproto
